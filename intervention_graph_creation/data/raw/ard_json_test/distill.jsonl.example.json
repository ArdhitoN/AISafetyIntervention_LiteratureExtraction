{
  "title": "Understanding Convolutions on Graphs",
  "authors": [
    "Ameya Daigavane",
    "Balaraman Ravindran",
    "Gaurav Aggarwal"
  ],
  "date_published": "2021-09-02T20:00:00Z",
  "text": "### Contents\n\n\n[Introduction](#introduction)\n[The Challenges of Computation on Graphs](#challenges)\n* [Lack of Consistent Structure](#lack-of-consistent-structure)\n* [Node-Order Equivariance](#node-order)\n* [Scalability](#scalability)\n\n\n[Problem Setting and Notation](#problem-and-notation)\n[Extending Convolutions to Graphs](#extending)\n[Polynomial Filters on Graphs](#polynomial-filters)\n[Modern Graph Neural Networks](#modern-gnns)\n[Interactive Graph Neural Networks](#interactive)\n[From Local to Global Convolutions](#from-local-to-global)\n* [Spectral Convolutions](#spectral)\n* [Global Propagation via Graph Embeddings](#graph-embeddings)\n\n\n[Learning GNN Parameters](#learning)\n\n[Conclusions and Further Reading](#further-reading)\n* [GNNs in Practice](#practical-techniques)\n* [Different Kinds of Graphs](#different-kinds-of-graphs)\n* [Pooling](#pooling)\n\n\n[Supplementary Material](#supplementary)\n* [Reproducing Experiments](#experiments-notebooks)\n* [Recreating Visualizations](#visualizations-notebooks)\n\n\n\n\n\n*This article is one of two Distill publications about graph neural networks.\n Take a look at\n [A Gentle Introduction to Graph Neural Networks](https://distill.pub/2021/gnn-intro/)\n\n for a companion view on many things graph and neural network related.* \n\n\n\n Many systems and interactions - social networks, molecules, organizations, citations, physical models, transactions - can be represented quite naturally as graphs.\n How can we reason about and make predictions within these systems?\n \n\n\n\n One idea is to look at tools that have worked well in other domains: neural networks have shown immense predictive power in a variety of learning tasks.\n However, neural networks have been traditionally used to operate on fixed-size and/or regular-structured inputs (such as sentences, images and video).\n This makes them unable to elegantly process graph-structured data.\n \n\n\n\n![Neural networks generally operate on fixed-size input vectors. How do we input a graph to a neural network?](images/standard-neural-networks.svg \"How do we input a graph to a neural network?\")\n\n\n\n Graph neural networks (GNNs) are a family of neural networks that can operate naturally on graph-structured data. \n By extracting and utilizing features from the underlying graph,\n GNNs can make more informed predictions about entities in these interactions,\n as compared to models that consider individual entities in isolation.\n \n\n\n\n GNNs are not the only tools available to model graph-structured data:\n graph kernels \n and random-walk methods \n were some of the most popular ones.\n Today, however, GNNs have largely replaced these techniques\n because of their inherent flexibility to model the underlying systems\n better.\n \n\n\n\n In this article, we will illustrate\n the challenges of computing over graphs, \n describe the origin and design of graph neural networks,\n and explore the most popular GNN variants in recent times.\n Particularly, we will see that many of these variants\n are composed of similar building blocks.\n \n\n\n\n First, let’s discuss some of the complications that graphs come with.\n \n\n\n\n The Challenges of Computation on Graphs\n-----------------------------------------\n\n\n### \n Lack of Consistent Structure\n\n\n\n Graphs are extremely flexible mathematical models; but this means they lack consistent structure across instances.\n Consider the task of predicting whether a given chemical molecule is toxic  :\n \n\n\n\n![The molecular structure of non-toxic 1,2,6-trigalloyl-glucose.](images/1,2,6-trigalloyl-glucose-molecule.svg)\n![The molecular structure of toxic caramboxin.](images/caramboxin-molecule.svg)\n\n\n\n**Left:** A non-toxic 1,2,6-trigalloyl-glucose molecule.\n\n\n**Right:** A toxic caramboxin molecule.\n\n\n\n Looking at a few examples, the following issues quickly become apparent:\n \n\n\n* Molecules may have different numbers of atoms.\n* The atoms in a molecule may be of different types.\n* Each of these atoms may have different number of connections.\n* These connections can have different strengths.\n\n\n\n Representing graphs in a format that can be computed over is non-trivial,\n and the final representation chosen often depends significantly on the actual problem.\n \n\n\n### \n Node-Order Equivariance\n\n\n\n Extending the point above: graphs often have no inherent ordering present amongst the nodes.\n Compare this to images, where every pixel is uniquely determined by its absolute position within the image!\n \n\n\n\n![Representing the graph as one vector requires us to fix an order on the nodes. But what do we do when the nodes have no inherent order?](images/node-order-alternatives.svg)\n\n Representing the graph as one vector requires us to fix an order on the nodes.\n But what do we do when the nodes have no inherent order?\n **Above:** \n The same graph labelled in two different ways. The alphabets indicate the ordering of the nodes.\n \n\n\n As a result, we would like our algorithms to be node-order equivariant:\n they should not depend on the ordering of the nodes of the graph.\n If we permute the nodes in some way, the resulting representations of \n the nodes as computed by our algorithms should also be permuted in the same way.\n \n\n\n### \n Scalability\n\n\n\n Graphs can be really large! Think about social networks like Facebook and Twitter, which have over a billion users. \n Operating on data this large is not easy.\n \n\n\n\n Luckily, most naturally occuring graphs are ‘sparse’:\n they tend to have their number of edges linear in their number of vertices.\n We will see that this allows the use of clever methods\n to efficiently compute representations of nodes within the graph.\n Further, the methods that we look at here will have significantly fewer parameters\n in comparison to the size of the graphs they operate on.\n \n\n\n\n Problem Setting and Notation\n------------------------------\n\n\n\n There are many useful problems that can be formulated over graphs:\n \n\n\n* **Node Classification:** Classifying individual nodes.\n* **Graph Classification:** Classifying entire graphs.\n* **Node Clustering:** Grouping together similar nodes based on connectivity.\n* **Link Prediction:** Predicting missing links.\n* **Influence Maximization:** Identifying influential nodes.\n\n\n\n![Examples of problems that can be defined over graphs.](images/graph-tasks.svg)\n\n Examples of problems that can be defined over graphs.\n This list is not exhaustive!\n \n\n\n A common precursor in solving many of these problems is **node representation learning**:\n learning to map individual nodes to fixed-size real-valued vectors (called ‘representations’ or ‘embeddings’).\n \n\n\n\n In [Learning GNN Parameters](#learning), we will see how the learnt embeddings can be used for these tasks.\n \n\n\n\n Different GNN variants are distinguished by the way these representations are computed.\n Generally, however, GNNs compute node representations in an iterative process.\n We will use the notation hv(k)h\\_v^{(k)}hv(k)​ to indicate the representation of node vvv after the kthk^{\\text{th}}kth iteration.\n Each iteration can be thought of as the equivalent of a ‘layer’ in standard neural networks.\n \n\n\n\n We will define a graph GGG as a set of nodes, VVV, with a set of edges EEE connecting them.\n Nodes can have individual features as part of the input: we will denote by xvx\\_vxv​ the individual feature for node v∈Vv \\in Vv∈V.\n For example, the ‘node features’ for a pixel in a color image\n would be the red, green and blue channel (RGB) values at that pixel.\n \n\n\n\n For ease of exposition, we will assume GGG is undirected, and all nodes are of the same type.\n These kinds of graphs are called ‘homogeneous’.\n Many of the same ideas we will see here \n apply to other kinds of graphs:\n we will discuss this later in [Different Kinds of Graphs](#different-kinds-of-graphs).\n \n\n\n\n Sometimes we will need to denote a graph property by a matrix MMM,\n where each row MvM\\_vMv​ represents a property corresponding to a particular vertex vvv.\n \n\n\n\n Extending Convolutions to Graphs\n----------------------------------\n\n\n\n Convolutional Neural Networks have been seen to be quite powerful in extracting features from images.\n However, images themselves can be seen as graphs with a very regular grid-like structure,\n where the individual pixels are nodes, and the RGB channel values at each pixel as the node features.\n \n\n\n\n A natural idea, then, is to consider generalizing convolutions to arbitrary graphs. Recall, however, the challenges\n listed out in the [previous section](#challenges): in particular, ordinary convolutions are not node-order invariant, because\n they depend on the absolute positions of pixels.\n It is initially unclear as how to generalize convolutions over grids to convolutions over general graphs,\n where the neighbourhood structure differs from node to node.\n \n The curious reader may wonder if performing some sort of padding and ordering\n could be done to ensure the consistency of neighbourhood structure across nodes.\n This has been attempted with some success ,\n but the techniques we will look at here are more general and powerful.\n \n\n\n\n\n\n\n\n Convolutions in CNNs are inherently localized.\n Neighbours participating in the convolution at the center pixel are highlighted in gray.\n \n\n\n\n\n GNNs can perform localized convolutions mimicking CNNs.\n Hover over a node to see its immediate neighbourhood highlighted on the left.\n The structure of this neighbourhood changes from node to node.\n \n\n\n import {Runtime, Inspector} from \"./observablehq-base/runtime.js\";\n import define from \"./notebooks/neighbourhoods-for-cnns-and-gnns.js\";\n setTimeout(() => {\n new Runtime().module(define, name => {\n if (name === \"cnn\\_svg\") return new Inspector(document.querySelector(\"#observablehq-cnn\\_svg-35509536\"));\n if (name === \"svg\") return new Inspector(document.querySelector(\"#observablehq-svg-35509536\"));\n return [\"adjust\\_dimensions\",\"reset\\_nodes\",\"highlight\\_nodes\",\"get\\_node\\_position\",\"remove\\_old\\_arrows\",\"draw\\_arrows\\_to\\_updated\\_node\",\"add\\_interactivity\",\"on\\_selected\\_node\\_change\",\"updated\\_node\\_position\"].includes(name);\n });\n }, 200);\n \n\n\n We begin by introducing the idea of constructing polynomial filters over node neighbourhoods,\n much like how CNNs compute localized filters over neighbouring pixels.\n Then, we will see how more recent approaches extend on this idea with more powerful mechanisms.\n Finally, we will discuss alternative methods\n that can use ‘global’ graph-level information for computing node representations.\n \n\n\n\n Polynomial Filters on Graphs\n------------------------------\n\n\n### \n The Graph Laplacian\n\n\n\n Given a graph GGG, let us fix an arbitrary ordering of the nnn nodes of GGG.\n We denote the 0−10-10−1 adjacency matrix of GGG by AAA, we can construct the diagonal degree matrix DDD of GGG as: \n \n\n\n\nDv=∑uAvu.\n D\\_v = \\sum\\_u A\\_{vu}.\n Dv​=u∑​Avu​.\n\n\n The degree of node vvv is the number of edges incident at vvv.\n \n\n\n\n where AvuA\\_{vu}Avu​ denotes the entry in the row corresponding to vvv and the column corresponding to uuu\n in the matrix AAA. We will use this notation throughout this section.\n \n\n\n\n Then, the graph Laplacian LLL is the square n×nn \\times nn×n matrix defined as:\n L=D−A.\n L = D - A.\n L=D−A.\n\n\n\n\n![](images/laplacian.svg)\n\n The Laplacian LLL for an undirected graph GGG, with the row corresponding to node C\\textsf{C}C highlighted.\n Zeros in LLL are not displayed above.\n The Laplacian LLL depends only on the structure of the graph GGG, not on any node features.\n \n\n\n The graph Laplacian gets its name from being the discrete analog of the\n [Laplacian operator](https://mathworld.wolfram.com/Laplacian.html)\n from calculus.\n \n\n\n\n Although it encodes precisely the same information as the adjacency matrix AAA\n\n In the sense that given either of the matrices AAA or LLL, you can construct the other.\n ,\n the graph Laplacian has many interesting properties of its own.\n \n The graph Laplacian shows up in many mathematical problems involving graphs:\n [random walks](https://people.math.sc.edu/lu/talks/nankai_2014/spec_nankai_2.pdf),\n [spectral clustering](https://arxiv.org/abs/0711.0189),\n and\n [diffusion](https://www.math.fsu.edu/~bertram/lectures/Diffusion.pdf), to name a few.\n \n We will see some of these properties\n in [a later section](#spectral),\n but will instead point readers to\n [this tutorial](https://csustan.csustan.edu/~tom/Clustering/GraphLaplacian-tutorial.pdf)\n for greater insight into the graph Laplacian.\n \n\n\n### \n Polynomials of the Laplacian\n\n\n\n Now that we have understood what the graph Laplacian is,\n we can build polynomials  of the form:\n pw(L)=w0In+w1L+w2L2+…+wdLd=∑i=0dwiLi.\n p\\_w(L) = w\\_0 I\\_n + w\\_1 L + w\\_2 L^2 + \\ldots + w\\_d L^d = \\sum\\_{i = 0}^d w\\_i L^i.\n pw​(L)=w0​In​+w1​L+w2​L2+…+wd​Ld=i=0∑d​wi​Li.\n Each polynomial of this form can alternately be represented by\n its vector of coefficients w=[w0,…,wd]w = [w\\_0, \\ldots, w\\_d]w=[w0​,…,wd​].\n Note that for every www, pw(L)p\\_w(L)pw​(L) is an n×nn \\times nn×n matrix, just like LLL.\n \n\n\n\n These polynomials can be thought of as the equivalent of ‘filters’ in CNNs,\n and the coefficients www as the weights of the ‘filters’.\n \n\n\n\n For ease of exposition, we will focus on the case where nodes have one-dimensional features:\n each of the xvx\\_vxv​ for v∈Vv \\in Vv∈V is just a real number. \n The same ideas hold when each of the xvx\\_vxv​ are higher-dimensional vectors, as well.\n \n\n\n\n Using the previously chosen ordering of the nodes,\n we can stack all of the node features xvx\\_vxv​\n to get a vector x∈Rnx \\in \\mathbb{R}^nx∈Rn.\n \n\n\n\n![Fixing a node order and collecting all node features into a single vector.](images/node-order-vector.svg)\n\n Fixing a node order (indicated by the alphabets) and collecting all node features into a single vector xxx.\n \n\n\n Once we have constructed the feature vector xxx,\n we can define its convolution with a polynomial filter pwp\\_wpw​ as:\n x′=pw(L) x\n x’ = p\\_w(L) \\ x\n x′=pw​(L) x\n To understand how the coefficients www affect the convolution,\n let us begin by considering the ‘simplest’ polynomial:\n when w0=1w\\_0 = 1w0​=1 and all of the other coefficients are 000.\n In this case, x′x’x′ is just xxx:\n x′=pw(L) x=∑i=0dwiLix=w0Inx=x.\n x’ = p\\_w(L) \\ x = \\sum\\_{i = 0}^d w\\_i L^ix = w\\_0 I\\_n x = x.\n x′=pw​(L) x=i=0∑d​wi​Lix=w0​In​x=x.\n Now, if we increase the degree, and consider the case where\n instead w1=1w\\_1 = 1w1​=1 and and all of the other coefficients are 000.\n Then, x′x’x′ is just LxLxLx, and so:\n xv′=(Lx)v=Lvx=∑u∈GLvuxu=∑u∈G(Dvu−Avu)xu=Dv xv−∑u∈N(v)xu\n \\begin{aligned}\n x’\\_v = (Lx)\\_v &= L\\_v x \\\\ \n &= \\sum\\_{u \\in G} L\\_{vu} x\\_u \\\\ \n &= \\sum\\_{u \\in G} (D\\_{vu} - A\\_{vu}) x\\_u \\\\ \n &= D\\_v \\ x\\_v - \\sum\\_{u \\in \\mathcal{N}(v)} x\\_u\n \\end{aligned}\n xv′​=(Lx)v​​=Lv​x=u∈G∑​Lvu​xu​=u∈G∑​(Dvu​−Avu​)xu​=Dv​ xv​−u∈N(v)∑​xu​​\n We see that the features at each node vvv are combined\n with the features of its immediate neighbours u∈N(v)u \\in \\mathcal{N}(v)u∈N(v).\n \n For readers familiar with\n [Laplacian filtering of images](https://docs.opencv.org/3.4/d5/db5/tutorial_laplace_operator.html),\n this is the exact same idea. When xxx is an image, \n x′=Lxx’ = Lxx′=Lx is exactly the result of applying a ‘Laplacian filter’ to xxx.\n \n\n\n\n\n At this point, a natural question to ask is:\n How does the degree ddd of the polynomial influence the behaviour of the convolution?\n Indeed, it is not too hard to show that:\n This is Lemma 5.2 from .\ndistG(v,u)>i⟹Lvui=0.\n \\text{dist}\\_G(v, u) > i \\quad \\Longrightarrow \\quad L\\_{vu}^i = 0.\n distG​(v,u)>i⟹Lvui​=0.\n \n This implies, when we convolve xxx with pw(L)p\\_w(L)pw​(L) of degree ddd to get x′x’x′:\n xv′=(pw(L)x)v=(pw(L))vx=∑i=0dwiLvix=∑i=0dwi∑u∈GLvuixu=∑i=0dwi∑u∈GdistG(v,u)≤iLvuixu.\n \\begin{aligned}\n x’\\_v = (p\\_w(L)x)\\_v &= (p\\_w(L))\\_v x \\\\\n &= \\sum\\_{i = 0}^d w\\_i L\\_v^i x \\\\\n &= \\sum\\_{i = 0}^d w\\_i \\sum\\_{u \\in G} L\\_{vu}^i x\\_u \\\\\n &= \\sum\\_{i = 0}^d w\\_i \\sum\\_{u \\in G \\atop \\text{dist}\\_G(v, u) \\leq i} L\\_{vu}^i x\\_u.\n \\end{aligned}\n xv′​=(pw​(L)x)v​​=(pw​(L))v​x=i=0∑d​wi​Lvi​x=i=0∑d​wi​u∈G∑​Lvui​xu​=i=0∑d​wi​distG​(v,u)≤iu∈G​∑​Lvui​xu​.​\n\n\n\n Effectively, the convolution at node vvv occurs only with nodes uuu which are not more than ddd hops away.\n Thus, these polynomial filters are localized. The degree of the localization is governed completely by ddd.\n \n\n\n\n To help you understand these ‘polynomial-based’ convolutions better, we have created the visualization below.\n Vary the polynomial coefficients and the input grid xxx to see how the result x′x’x′ of the convolution changes.\n The grid under the arrow shows the equivalent convolutional kernel applied at the highlighted pixel in xxx to get\n the resulting pixel in x′x’x′.\n The kernel corresponds to the row of pw(L)p\\_w(L)pw​(L) for the highlighted pixel.\n Note that even after adjusting for position,\n this kernel is different for different pixels, depending on their position within the grid.\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n import {Runtime, Inspector} from \"./observablehq-base/runtime.js\";\n import define from \"./notebooks/cleaner-interactive-graph-polynomial-convolutions.js\";\n setTimeout(() => {\n new Runtime().module(define, name => {\n if (name === \"grid\\_buttons\\_display\") return new Inspector(document.querySelector(\"#observablehq-grid\\_buttons\\_display-05850d43\"));\n if (name === \"poly\\_color\\_scale\") return new Inspector(document.querySelector(\"#observablehq-poly\\_color\\_scale-05850d43\"));\n if (name === \"poly\\_figcaptions\") return new Inspector(document.querySelector(\"#observablehq-poly\\_figcaptions-05850d43\"));\n if (name === \"poly\\_conv\\_main\\_div\") return new Inspector(document.querySelector(\"#observablehq-poly\\_conv\\_main\\_div-05850d43\"));\n if (name === \"viewof laplacian\\_type\") return new Inspector(document.querySelector(\"#observablehq-viewof-laplacian\\_type-05850d43\"));\n if (name === \"polynomial\\_display\") return new Inspector(document.querySelector(\"#observablehq-polynomial\\_display-05850d43\"));\n if (name === \"poly\\_conv\\_sliders\") return new Inspector(document.querySelector(\"#observablehq-poly\\_conv\\_sliders-05850d43\"));\n if (name === \"highlight\\_selected\\_cell\") return new Inspector(document.querySelector(\"#observablehq-highlight\\_selected\\_cell-05850d43\"));\n if (name === \"reset\\_coeffs\\_button\\_display\") return new Inspector(document.querySelector(\"#observablehq-reset\\_coeffs\\_button\\_display-05850d43\"));\n if (name === \"poly\\_input\\_slider\\_watch\") return new Inspector(document.querySelector(\"#observablehq-poly\\_input\\_slider\\_watch-05850d43\"));\n return [\"svg\",\"draw\\_bottom\\_line\",\"draw\\_arrow\",\"draw\\_original\\_img\",\"draw\\_convolutional\\_kernel\",\"draw\\_updated\\_img\",\"draw\\_static\\_graph\\_orig\",\"draw\\_static\\_graph\\_upd\",\"draw\\_dyn\\_graph\\_orig\",\"draw\\_dyn\\_graph\\_upd\"].includes(name);\n });\n }, 200);\n \n\n\n\n\n Hover over a pixel in the input grid (left, representing xxx)\n to highlight it and see the equivalent convolutional kernel\n for that pixel under the arrow.\n The result x′x’x′ of the convolution is shown on the right:\n note that different convolutional kernels are applied at different pixels,\n depending on their location.\n \n\n\n\n Click on the input grid to toggle pixel values between 000 (white) and 111 (blue).\n To randomize the input grid, press ‘Randomize Grid’. To reset all pixels to 000, press ‘Reset Grid’.\n Use the sliders at the bottom to change the coefficients www.\n To reset all coefficients www to 000, press ‘Reset Coefficients.’\n \n\n\n\n\n### \n ChebNet\n\n\n\n ChebNet  refines this idea of polynomial filters by looking at polynomial filters of the form:\n \npw(L)=∑i=1dwiTi(L~)\n p\\_w(L) = \\sum\\_{i = 1}^d w\\_i T\\_i(\\tilde{L})\n pw​(L)=i=1∑d​wi​Ti​(L~)\n\n where TiT\\_iTi​ is the degree-iii\n[Chebyshev polynomial of the first kind](https://en.wikipedia.org/wiki/Chebyshev_polynomials) and\n L~\\tilde{L}L~ is the normalized Laplacian defined using the largest eigenvalue of LLL:\n \n We discuss the eigenvalues of the Laplacian LLL in more detail in [a later section](#spectral).\n \n\nL~=2Lλmax(L)−In.\n \\tilde{L} = \\frac{2L}{\\lambda\\_{\\max}(L)} - I\\_n.\n L~=λmax​(L)2L​−In​.\n\n What is the motivation behind these choices?\n \n\n\n* LLL is actually positive semi-definite: all of the eigenvalues of LLL are not lesser than 000.\n If λmax(L)>1\\lambda\\_{\\max}(L) > 1λmax​(L)>1, the entries in the powers of LLL rapidly increase in size.\n L~\\tilde{L}L~ is effectively a scaled-down version of LLL, with eigenvalues guaranteed to be in the range [−1,1][-1, 1][−1,1].\n This prevents the entries of powers of L~\\tilde{L}L~ from blowing up.\n Indeed, in the [visualization above](#polynomial-convolutions): we restrict the higher-order coefficients\n when the unnormalized Laplacian LLL is selected, but allow larger values when the normalized Laplacian L~\\tilde{L}L~ is selected,\n in order to show the result x′x’x′ on the same color scale.\n* The Chebyshev polynomials have certain interesting properties that make interpolation more numerically stable.\n We won’t talk about this in more depth here,\n but will advise interested readers to take a look at  as a definitive resource.\n\n\n### \n Polynomial Filters are Node-Order Equivariant\n\n\n\n The polynomial filters we considered here are actually independent of the ordering of the nodes.\n This is particularly easy to see when the degree of the polynomial pwp\\_wpw​ is 111:\n where each node’s feature is aggregated with the sum of its neighbour’s features.\n Clearly, this sum does not depend on the order of the neighbours.\n A similar proof follows for higher degree polynomials:\n the entries in the powers of LLL are equivariant to the ordering of the nodes.\n \n\n\n\n**Details for the Interested Reader**\n\n As above, let’s assume an arbitrary node-order over the nnn nodes of our graph.\n Any other node-order can be thought of as a permutation of this original node-order.\n We can represent any permutation by a\n [permutation matrix](https://en.wikipedia.org/wiki/Permutation_matrix) PPP.\n PPP will always be an orthogonal 0−10-10−1 matrix:\n PPT=PTP=In.\n PP^T = P^TP = I\\_n.\n PPT=PTP=In​.\n Then, we call a function fff node-order equivariant iff for all permutations PPP:\n f(Px)=Pf(x).\n f(Px) = P f(x).\n f(Px)=Pf(x).\n\n When switching to the new node-order using the permutation PPP,\n the quantities below transform in the following way:\n x→PxL→PLPTLi→PLiPT\n \\begin{aligned}\n x &\\to Px \\\\\n L &\\to PLP^T \\\\\n L^i &\\to PL^iP^T\n \\end{aligned}\n xLLi​→Px→PLPT→PLiPT​\n and so, for the case of polynomial filters where f(x)=pw(L) xf(x) = p\\_w(L) \\ xf(x)=pw​(L) x, we can see that:\n f(Px)=∑i=0dwi(PLiPT)(Px)=P∑i=0dwiLix=Pf(x).\n \\begin{aligned}\n f(Px) & = \\sum\\_{i = 0}^d w\\_i (PL^iP^T) (Px) \\\\\n & = P \\sum\\_{i = 0}^d w\\_i L^i x \\\\\n & = P f(x).\n \\end{aligned}\n f(Px)​=i=0∑d​wi​(PLiPT)(Px)=Pi=0∑d​wi​Lix=Pf(x).​ \n as claimed.\n \n\n\n\n### \n Embedding Computation\n\n\n\n We now describe how we can build a graph neural network\n by stacking ChebNet (or any polynomial filter) layers\n one after the other with non-linearities,\n much like a standard CNN.\n In particular, if we have KKK different polynomial filter layers,\n the kthk^{\\text{th}}kth of which has its own learnable weights w(k)w^{(k)}w(k),\n we would perform the following computation:\n \n\n\n\n\n\n\n import {Runtime, Inspector} from \"./observablehq-base/runtime.js\";\n import define from \"./notebooks/updated-chebnet-equations.js\";\n setTimeout(() => {\n new Runtime().module(define, name => {\n if (name === \"cheb\\_figure\") return new Inspector(document.querySelector(\"#observablehq-cheb\\_figure-fa1f970f\"));\n if (name === \"style\") return new Inspector(document.querySelector(\"#observablehq-style-fa1f970f\"));\n });\n }, 200);\n \n\n Note that these networks\n reuse the same filter weights across different nodes,\n exactly mimicking weight-sharing in Convolutional Neural Networks (CNNs)\n which reuse weights for convolutional filters across a grid.\n \n\n\n\n Modern Graph Neural Networks\n------------------------------\n\n\n\n ChebNet was a breakthrough in learning localized filters over graphs,\n and it motivated many to think of graph convolutions from a different perspective.\n \n\n\n\n We return back to the result of convolving xxx by the polynomial kernel pw(L)=Lp\\_w(L) = Lpw​(L)=L,\n focussing on a particular vertex vvv:\n \n(Lx)v=Lvx=∑u∈GLvuxu=∑u∈G(Dvu−Avu)xu=Dv xv−∑u∈N(v)xu\n \\begin{aligned}\n (Lx)\\_v &= L\\_v x \\\\ \n &= \\sum\\_{u \\in G} L\\_{vu} x\\_u \\\\ \n &= \\sum\\_{u \\in G} (D\\_{vu} - A\\_{vu}) x\\_u \\\\ \n &= D\\_v \\ x\\_v - \\sum\\_{u \\in \\mathcal{N}(v)} x\\_u\n \\end{aligned}\n (Lx)v​​=Lv​x=u∈G∑​Lvu​xu​=u∈G∑​(Dvu​−Avu​)xu​=Dv​ xv​−u∈N(v)∑​xu​​\n \n As we noted before, this is a 111-hop localized convolution.\n But more importantly, we can think of this convolution as arising of two steps:\n \n\n\n* Aggregating over immediate neighbour features xux\\_uxu​.\n* Combining with the node’s own feature xvx\\_vxv​.\n\n\n\n**Key Idea:**\n What if we consider different kinds of ‘aggregation’ and ‘combination’ steps,\n beyond what are possible using polynomial filters?\n \n\n\n\n By ensuring that the aggregation is node-order equivariant,\n the overall convolution becomes node-order equivariant.\n \n\n\n\n These convolutions can be thought of as ‘message-passing’ between adjacent nodes:\n after each step, every node receives some ‘information’ from its neighbours.\n \n\n\n\n By iteratively repeating the 111-hop localized convolutions KKK times (i.e., repeatedly ‘passing messages’),\n the receptive field of the convolution effectively includes all nodes upto KKK hops away.\n \n\n\n### \n Embedding Computation\n\n\n\n Message-passing forms the backbone of many GNN architectures today.\n We describe the most popular ones in depth below:\n \n\n\n* Graph Convolutional Networks (GCN)\n* Graph Attention Networks (GAT)\n* Graph Sample and Aggregate (GraphSAGE)\n* Graph Isomorphism Network (GIN)\n\n\n\n\n\n\n\n\n import {Runtime, Inspector} from \"./observablehq-base/runtime.js\"; \n import define from \"./notebooks/interactive-gnn-equations.js\";\n setTimeout(() => {\n new Runtime().module(define, name => {\n if (name === \"fig\\_div\") return Inspector.into(\".interactive-gnn-equations-fig\\_div\")();\n if (name === \"text\\_div\") return Inspector.into(\".interactive-gnn-equations-text\\_div\")();\n if (name === \"interactive\\_list\") return Inspector.into(\".interactive-gnn-equations-interactive\\_list\")();\n if (name === \"style\") return Inspector.into(\".interactive-gnn-equations-style\")();\n });\n }, 200);\n \n\n### \n Thoughts\n\n\n\n An interesting point is to assess different aggregation functions: are some better and others worse?\n  demonstrates that aggregation functions indeed can be compared on how well\n they can uniquely preserve node neighbourhood features;\n we recommend the interested reader take a look at the detailed theoretical analysis there.\n \n\n\n\n Here, we’ve talk about GNNs where the computation only occurs at the nodes.\n More recent GNN models\n such as Message-Passing Neural Networks \n and Graph Networks \n perform computation over the edges as well;\n they compute edge embeddings together with node embeddings.\n This is an even more general framework -\n but the same ‘message passing’ ideas from this section apply.\n \n\n\n\n Interactive Graph Neural Networks\n-----------------------------------\n\n\n\n Below is an interactive visualization of these GNN models on small graphs.\n For clarity, the node features are just real numbers here, shown inside the squares next to each node,\n but the same equations hold when the node features are vectors.\n \n\n\n\n\n\n\n\n\n\n\n\n import {Runtime, Inspector} from \"./observablehq-base/runtime.js\";\n import define from \"./notebooks/interactive-gnn-visualizations.js\";\n setTimeout(() => {\n new Runtime().module(define, name => {\n if (name === \"viz\\_list\") return Inspector.into(\".interactive-gnn-visualizations-viz\\_list\")();\n if (name === \"buttons\") return Inspector.into(\".interactive-gnn-visualizations-buttons\")();\n if (name === \"fig\") return Inspector.into(\".interactive-gnn-visualizations-fig\")();\n if (name === \"eqn\") return Inspector.into(\".interactive-gnn-visualizations-eqn\")();\n if (name === \"network\\_display\\_hack\") return Inspector.into(\".interactive-gnn-visualizations-network\\_display\\_hack\")();\n if (name === \"style\") return Inspector.into(\".interactive-gnn-visualizations-style\")();\n return [\"interactive\\_list\",\"select\\_fig\",\"handle\\_click\"].includes(name) || null;\n });\n }, 200);\n \n\n\n Choose a GNN model using the tabs at the top. Click on a node to see the update equation at that node for the next iteration.\n Use the sliders on the left to change the weights for the current iteration, and watch how the update equation changes. \n \n\n\n In practice, each iteration above is generally thought of as a single ‘neural network layer’.\n This ideology is followed by many popular Graph Neural Network libraries,\n \n For example: [PyTorch Geometric](https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html)\n and [StellarGraph](https://stellargraph.readthedocs.io/en/stable/api.html#module-stellargraph.layer).\n \n allowing one to compose different types of graph convolutions in the same model.\n \n\n\n\n From Local to Global Convolutions\n-----------------------------------\n\n\n\n The methods we’ve seen so far perform ‘local’ convolutions:\n every node’s feature is updated using a function of its local neighbours’ features.\n \n\n\n\n While performing enough steps of message-passing will eventually ensure that\n information from all nodes in the graph is passed,\n one may wonder if there are more direct ways to perform ‘global’ convolutions.\n \n\n\n\n The answer is yes; we will now describe an approach that was actually first put forward\n in the context of neural networks by ,\n much before any of the GNN models we looked at above.\n \n\n\n### \n Spectral Convolutions\n\n\n\n As before, we will focus on the case where nodes have one-dimensional features.\n After choosing an arbitrary node-order, we can stack all of the node features to get a\n ‘feature vector’ x∈Rnx \\in \\mathbb{R}^nx∈Rn.\n \n\n\n\n**Key Idea:**\n Given a feature vector xxx, \n the Laplacian LLL allows us to quantify how smooth xxx is, with respect to GGG.\n \n\n\n\n How?\n \n\n\n\n After normalizing xxx such that ∑i=1nxi2=1\\sum\\_{i = 1}^n x\\_i^2 = 1∑i=1n​xi2​=1,\n if we look at the following quantity involving LLL:\n \nRLR\\_LRL​ is formally called the [Rayleigh quotient](https://en.wikipedia.org/wiki/Rayleigh_quotient).\n \nRL(x)=xTLxxTx=∑(i,j)∈E(xi−xj)2∑ixi2=∑(i,j)∈E(xi−xj)2.\n R\\_L(x) = \\frac{x^T L x}{x^T x} = \\frac{\\sum\\_{(i, j) \\in E} (x\\_i - x\\_j)^2}{\\sum\\_i x\\_i^2} = \\sum\\_{(i, j) \\in E} (x\\_i - x\\_j)^2.\n RL​(x)=xTxxTLx​=∑i​xi2​∑(i,j)∈E​(xi​−xj​)2​=(i,j)∈E∑​(xi​−xj​)2.\n we immediately see that feature vectors xxx that assign similar values to \n adjacent nodes in GGG (hence, are smooth) would have smaller values of RL(x)R\\_L(x)RL​(x).\n \n\n\n\nLLL is a real, symmetric matrix, which means it has all real eigenvalues λ1≤…≤λn\\lambda\\_1 \\leq \\ldots \\leq \\lambda\\_{n}λ1​≤…≤λn​.\n \n An eigenvalue λ\\lambdaλ of a matrix AAA is a value\n satisfying the equation Au=λuAu = \\lambda uAu=λu for a certain vector uuu, called an eigenvector.\n For a friendly introduction to eigenvectors,\n please see [this tutorial](http://www.sosmath.com/matrix/eigen0/eigen0.html).\n \n Further, the corresponding eigenvectors u1,…,unu\\_1, \\ldots, u\\_{n}u1​,…,un​ can be taken to be orthonormal:\n uk1Tuk2={1 if k1=k2.0 if k1≠k2.\n u\\_{k\\_1}^T u\\_{k\\_2} =\n \\begin{cases}\n 1 \\quad \\text{ if } {k\\_1} = {k\\_2}. \\\\\n 0 \\quad \\text{ if } {k\\_1} \\neq {k\\_2}.\n \\end{cases}\n uk1​T​uk2​​={1 if k1​=k2​.0 if k1​≠k2​.​\n It turns out that these eigenvectors of LLL are successively less smooth, as RLR\\_LRL​ indicates:\n This is the [min-max theorem for eigenvalues.](https://en.wikipedia.org/wiki/Min-max_theorem)\nargminx, x⊥{u1,…,ui−1}RL(x)=ui.minx, x⊥{u1,…,ui−1}RL(x)=λi.\n \\underset{x, \\ x \\perp \\{u\\_1, \\ldots, u\\_{i - 1}\\}}{\\text{argmin}} R\\_L(x) = u\\_i.\n \\qquad\n \\qquad\n \\qquad\n \\min\\_{x, \\ x \\perp \\{u\\_1, \\ldots, u\\_{i - 1}\\}} R\\_L(x) = \\lambda\\_i.\n x, x⊥{u1​,…,ui−1​}argmin​RL​(x)=ui​.x, x⊥{u1​,…,ui−1​}min​RL​(x)=λi​.\n The set of eigenvalues of LLL are called its ‘spectrum’, hence the name!\n We denote the ‘spectral’ decomposition of LLL as:\n L=UΛUT.\n L = U \\Lambda U^T.\n L=UΛUT.\n where Λ\\LambdaΛ is the diagonal matrix of sorted eigenvalues,\n and UUU denotes the matrix of the eigenvectors (sorted corresponding to increasing eigenvalues):\n Λ=[λ1⋱λn]U=[u1 ⋯ un].\n \\Lambda = \\begin{bmatrix}\n \\lambda\\_{1} & & \\\\\n & \\ddots & \\\\\n & & \\lambda\\_{n}\n \\end{bmatrix}\n \\qquad\n \\qquad\n \\qquad\n \\qquad\n U = \\begin{bmatrix} \\\\ u\\_1 \\ \\cdots \\ u\\_n \\\\ \\end{bmatrix}.\n Λ=⎣⎡​λ1​​⋱​λn​​⎦⎤​U=⎣⎡​u1​ ⋯ un​​⎦⎤​.\n The orthonormality condition between eigenvectors gives us that UTU=IU^T U = IUTU=I, the identity matrix.\n As these nnn eigenvectors form a basis for Rn\\mathbb{R}^nRn,\n any feature vector xxx can be represented as a linear combination of these eigenvectors:\n x=∑i=1nxi^ui=Ux^.\n x = \\sum\\_{i = 1}^n \\hat{x\\_i} u\\_i = U \\hat{x}.\n x=i=1∑n​xi​^​ui​=Ux^.\n where x^\\hat{x}x^ is the vector of coefficients [x0,…xn][x\\_0, \\ldots x\\_n][x0​,…xn​].\n We call x^\\hat{x}x^ as the spectral representation of the feature vector xxx.\n The orthonormality condition allows us to state:\n x=Ux^⟺UTx=x^.\n x = U \\hat{x} \\quad \\Longleftrightarrow \\quad U^T x = \\hat{x}.\n x=Ux^⟺UTx=x^.\n This pair of equations allows us to interconvert\n between the ‘natural’ representation xxx and the ‘spectral’ representation x^\\hat{x}x^\n for any vector x∈Rnx \\in \\mathbb{R}^nx∈Rn.\n \n\n\n### \n Spectral Representations of Natural Images\n\n\n\n As discussed before, we can consider any image as a grid graph, where each pixel is a node,\n connected by edges to adjacent pixels.\n Thus, a pixel can have either 3,5,3, 5,3,5, or 888 neighbours, depending on its location within the image grid.\n Each pixel gets a value as part of the image. If the image is grayscale, each value will be a single \n real number indicating how dark the pixel is. If the image is colored, each value will be a 333-dimensional\n vector, indicating the values for the red, green and blue (RGB) channels.\n We use the alpha channel as well in the visualization below, so this is actually RGBA.\n\n\n\n\n This construction allows us to compute the graph Laplacian and the eigenvector matrix UUU.\n Given an image, we can then investigate what its spectral representation looks like.\n \n\n\n\n To shed some light on what the spectral representation actually encodes,\n we perform the following experiment over each channel of the image independently: \n \n\n\n* We first collect all pixel values across a channel into a feature vector xxx.\n* Then, we obtain its spectral representation x^\\hat{x}x^.\n x^=UTx\n \\hat{x} = U^T x\n x^=UTx\n* We truncate this to the first mmm components to get x^m\\hat{x}\\_mx^m​.\n By truncation, we mean zeroing out all of the remaining n−mn - mn−m components of x^\\hat{x}x^.\n This truncation is equivalent to using only the first mmm eigenvectors to compute the spectral representation.\n x^m=Truncatem(x^)\n \\hat{x}\\_m = \\text{Truncate}\\_m(\\hat{x})\n x^m​=Truncatem​(x^)\n* Then, we convert this truncated representation x^m\\hat{x}\\_mx^m​ back to the natural basis to get xmx\\_mxm​.\n xm=Ux^m\n x\\_m = U \\hat{x}\\_m\n xm​=Ux^m​\n\n\n\n Finally, we stack the resulting channels back together to get back an image.\n We can now see how the resulting image changes with choices of mmm.\n Note that when m=nm = nm=n, the resulting image is identical to the original image,\n as we can reconstruct each channel exactly.\n \n\n\n\n\n\n\n\n\n\n\n\n import {Runtime, Inspector} from \"./observablehq-base/runtime.js\"; \n import define from \"./notebooks/spectral-decompositions-of-natural-images.js\";\n setTimeout(() => {\n new Runtime().module(define, name => {\n if (name === \"spectralDecompositionsAll\") return new Inspector(document.querySelector(\"#observablehq-spectralDecompositionsAll-59114e0b\"));\n if (name === \"updateArrowCaption\") return new Inspector(document.querySelector(\"#observablehq-updateArrowCaption-59114e0b\"));\n if (name === \"drawArrow\") return new Inspector(document.querySelector(\"#observablehq-drawArrow-59114e0b\"));\n if (name === \"drawCurrBaseImg\") return new Inspector(document.querySelector(\"#observablehq-drawCurrBaseImg-59114e0b\"));\n if (name === \"drawCurrUpdImg\") return new Inspector(document.querySelector(\"#observablehq-drawCurrUpdImg-59114e0b\"));\n if (name === \"style\") return new Inspector(document.querySelector(\"#observablehq-style-59114e0b\"));\n });\n }, 200);\n \n\n\n\n Use the radio buttons at the top to chose one of the four sample images.\n Each of these images has been taken from the ImageNet \n dataset and downsampled to 505050 pixels wide and 404040 pixels tall.\n As there are n=50×40=2000n = 50 \\times 40 = 2000n=50×40=2000 pixels in each image, there are 200020002000 Laplacian eigenvectors.\n Use the slider at the bottom to change the number of spectral components to keep, noting how\n images get progressively blurrier as the number of components decrease.\n \n\n\n As mmm decreases, we see that the output image xmx\\_mxm​ gets blurrier.\n If we decrease mmm to 111, the output image xmx\\_mxm​ is entirely the same color throughout.\n We see that we do not need to keep all nnn components;\n we can retain a lot of the information in the image with significantly fewer components.\n\n We can relate this to the Fourier decomposition of images:\n the more eigenvectors we use, the higher frequencies we can represent on the grid.\n \n\n\n\n To complement the visualization above,\n we additionally visualize the first few eigenvectors on a smaller 8×88 \\times 88×8 grid below.\n We change the coefficients of the first 101010 out of 646464 eigenvectors\n in the spectral representation\n and see how the resulting image changes:\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n import {Runtime, Inspector} from \"./observablehq-base/runtime.js\"; \n import define from \"./notebooks/interactive-spectral-conversions.js\";\n setTimeout(() => {\n new Runtime().module(define, name => {\n if (name === \"figcaptions\") return new Inspector(document.querySelector(\"#observablehq-figcaptions-6ac8e785\"));\n if (name === \"spec\\_conv\\_main\\_div\") return new Inspector(document.querySelector(\"#observablehq-spec\\_conv\\_main\\_div-6ac8e785\"));\n if (name === \"spec\\_color\\_scale\") return new Inspector(document.querySelector(\"#observablehq-spec\\_color\\_scale-6ac8e785\"));\n if (name === \"subgrid\\_main\\_div\") return new Inspector(document.querySelector(\"#observablehq-subgrid\\_main\\_div-6ac8e785\"));\n if (name === \"spec\\_conv\\_sliders\") return new Inspector(document.querySelector(\"#observablehq-spec\\_conv\\_sliders-6ac8e785\"));\n if (name === \"spec\\_conv\\_buttons\\_display\") return new Inspector(document.querySelector(\"#observablehq-spec\\_conv\\_buttons\\_display-6ac8e785\"));\n if (name === \"spec\\_input\\_slider\\_watch\") return new Inspector(document.querySelector(\"#observablehq-spec\\_input\\_slider\\_watch-6ac8e785\"));\n return [\"svg\",\"draw\\_img\",\"draw\\_static\\_graph\",\"draw\\_dyn\\_graph\",\"draw\\_eigenvectors\"].includes(name);\n });\n }, 200);\n \n\n\n Move the sliders to change the spectral representation x^\\hat{x}x^ (right),\n and see how xxx itself changes on the image (left).\n Note how the first eigenvectors are much ‘smoother’ than the later ones,\n and the many patterns we can make with only 101010 eigenvectors.\n \n\n\n These visualizations should convince you that the first eigenvectors are indeed smooth,\n and the smoothness correspondingly decreases as we consider later eigenvectors.\n \n\n\n\n For any image xxx, we can think of\n the initial entries of the spectral representation x^\\hat{x}x^\n as capturing ‘global’ image-wide trends, which are the low-frequency components,\n while the later entries as capturing ‘local’ details, which are the high-frequency components.\n \n\n\n### Embedding Computation\n\n\n\n We now have the background to understand spectral convolutions\n and how they can be used to compute embeddings/feature representations of nodes.\n \n\n\n\n As before, the model we describe below has KKK layers:\n each layer kkk has learnable parameters w^(k)\\hat{w}^{(k)}w^(k),\n called the ‘filter weights’.\n These weights will be convolved with the spectral representations of the node features.\n As a result, the number of weights needed in each layer is equal to mmm, the number of \n eigenvectors used to compute the spectral representations.\n We had shown in the previous section that we can take m≪nm \\ll nm≪n\n and still not lose out on significant amounts of information.\n \n\n\n\n Thus, convolution in the spectral domain enables the use of significantly fewer parameters\n than just direct convolution in the natural domain.\n Further, by virtue of the smoothness of the Laplacian eigenvectors across the graph,\n using spectral representations automatically enforces an inductive bias for\n neighbouring nodes to get similar representations.\n \n\n\n\n Assuming one-dimensional node features for now,\n the output of each layer is a vector of node representations h(k)h^{(k)}h(k),\n where each node’s representation corresponds to a row\n of the vector.\n \n\n\n\n\n We fix an ordering of the nodes in GGG. This gives us the adjacency matrix AAA and the graph Laplacian LLL,\n allowing us to compute UmU\\_mUm​.\n Finally, we can describe the computation that the layers perform, one after the other:\n \n\n\n\n\n\n import {Runtime, Inspector} from \"./observablehq-base/runtime.js\"; \n import define from \"./notebooks/spectral-convolutions-equation.js\";\n setTimeout(() => {\n new Runtime().module(define, name => {\n if (name === \"spec\\_figure\\_init\") return Inspector.into(\".spec\\_figure\\_init\")();\n if (name === \"spec\\_figure\") return Inspector.into(\".spec\\_figure\")();\n if (name === \"style\") return Inspector.into(\".spec\\_figure\\_style\")();\n });\n }, 200);\n \n\n The method above generalizes easily to the case where each h(k)∈Rdkh^{(k)} \\in \\mathbb{R}^{d\\_k}h(k)∈Rdk​, as well:\n see  for details.\n \n\n\n\n With the insights from the previous section, we see that convolution in the spectral-domain of graphs\n can be thought of as the generalization of convolution in the frequency-domain of images.\n \n\n\n### \n Spectral Convolutions are Node-Order Equivariant\n\n\n\n We can show spectral convolutions are node-order equivariant using a similar approach\n as for Laplacian polynomial filters. \n \n\n\n\n**Details for the Interested Reader** \n\n As in [our proof before](#poly-filters-equivariance),\n let’s fix an arbitrary node-order.\n Then, any other node-order can be represented by a\n permutation of this original node-order.\n We can associate this permutation with its permutation matrix PPP.\n\n Under this new node-order,\n the quantities below transform in the following way:\n x→PxA→PAPTL→PLPTUm→PUm\n \\begin{aligned}\n x &\\to Px \\\\\n A &\\to PAP^T \\\\\n L &\\to PLP^T \\\\\n U\\_m &\\to PU\\_m\n \\end{aligned}\n xALUm​​→Px→PAPT→PLPT→PUm​​\n which implies that, in the embedding computation:\n x^→(PUm)T(Px)=UmTx=x^w^→(PUm)T(Pw)=UmTw=w^g^→g^g→(PUm)g^=P(Umg^)=Pg\n \\begin{aligned}\n \\hat{x} &\\to \\left(PU\\_m\\right)^T (Px) = U\\_m^T x = \\hat{x} \\\\\n \\hat{w} &\\to \\left(PU\\_m\\right)^T (Pw) = U\\_m^T w = \\hat{w} \\\\\n \\hat{g} &\\to \\hat{g} \\\\\n g &\\to (PU\\_m)\\hat{g} = P(U\\_m\\hat{g}) = Pg\n \\end{aligned}\n x^w^g^​g​→(PUm​)T(Px)=UmT​x=x^→(PUm​)T(Pw)=UmT​w=w^→g^​→(PUm​)g^​=P(Um​g^​)=Pg​\n Hence, as σ\\sigmaσ is applied elementwise:\n f(Px)=σ(Pg)=Pσ(g)=Pf(x)\n f(Px) = \\sigma(Pg) = P \\sigma(g) = P f(x)\n f(Px)=σ(Pg)=Pσ(g)=Pf(x)\n as required.\n Further, we see that the spectral quantities x^,w^\\hat{x}, \\hat{w}x^,w^ and g^\\hat{g}g^​\n are unchanged by permutations of the nodes.\n \n Formally, they are what we would call node-order invariant.\n \n\n\n\n\n\n The theory of spectral convolutions is mathematically well-grounded;\n however, there are some key disadvantages that we must talk about:\n \n\n\n* We need to compute the eigenvector matrix UmU\\_mUm​ from LLL. For large graphs, this becomes quite infeasible.\n* Even if we can compute UmU\\_mUm​, global convolutions themselves are inefficient to compute,\n because of the repeated\n multiplications with UmU\\_mUm​ and UmTU\\_m^TUmT​.\n* The learned filters are specific to the input graphs,\n as they are represented in terms\n of the spectral decomposition of input graph Laplacian LLL.\n This means they do not transfer well to new graphs\n which have significantly different structure (and hence, significantly\n different eigenvalues) .\n\n\n\n While spectral convolutions have largely been superseded by\n ‘local’ convolutions for the reasons discussed above,\n there is still much merit to understanding the ideas behind them.\n Indeed, a recently proposed GNN model called Directional Graph Networks\n \n actually uses the Laplacian eigenvectors\n and their mathematical properties\n extensively.\n \n\n\n### \n Global Propagation via Graph Embeddings\n\n\n\n A simpler way to incorporate graph-level information\n is to compute embeddings of the entire graph by pooling node\n (and possibly edge) embeddings,\n and then using the graph embedding to update node embeddings,\n following an iterative scheme similar to what we have looked at here.\n This is an approach used by Graph Networks\n .\n We will briefly discuss how graph-level embeddings\n can be constructed in [Pooling](#pooling).\n However, such approaches tend to ignore the underlying\n topology of the graph that spectral convolutions can capture.\n \n\n\n\n Learning GNN Parameters\n-------------------------\n\n\n\n All of the embedding computations we’ve described here, whether spectral or spatial, are completely differentiable.\n This allows GNNs to be trained in an end-to-end fashion, just like a standard neural network,\n once a suitable loss function L\\mathcal{L}L is defined:\n \n\n\n* **Node Classification**: By minimizing any of the standard losses for classification tasks,\n such as categorical cross-entropy when multiple classes are present:\n L(yv,yv^)=−∑cyvclogyvc^.\n \\mathcal{L}(y\\_v, \\hat{y\\_v}) = -\\sum\\_{c} y\\_{vc} \\log{\\hat{y\\_{vc}}}.\n L(yv​,yv​^​)=−c∑​yvc​logyvc​^​.\n where yvc^\\hat{y\\_{vc}}yvc​^​ is the predicted probability that node vvv is in class ccc.\n GNNs adapt well to the semi-supervised setting, which is when only some nodes in the graph are labelled.\n In this setting, one way to define a loss LG\\mathcal{L}\\_{G}LG​ over an input graph GGG is:\n LG=∑v∈Lab(G)L(yv,yv^)∣Lab(G)∣\n \\mathcal{L}\\_{G} = \\frac{\\sum\\limits\\_{v \\in \\text{Lab}(G)} \\mathcal{L}(y\\_v, \\hat{y\\_v})}{| \\text{Lab}(G) |}\n LG​=∣Lab(G)∣v∈Lab(G)∑​L(yv​,yv​^​)​\n where, we only compute losses over labelled nodes Lab(G)\\text{Lab}(G)Lab(G).\n* **Graph Classification**: By aggregating node representations,\n one can construct a vector representation of the entire graph.\n This graph representation can be used for any graph-level task, even beyond classification.\n See [Pooling](#pooling) for how representations of graphs can be constructed.\n* **Link Prediction**: By sampling pairs of adjacent and non-adjacent nodes,\n and use these vector pairs as inputs to predict the presence/absence of an edge.\n For a concrete example, by minimizing the following ‘logistic regression’-like loss:\n L(yv,yu,evu)=−evulog(pvu)−(1−evu)log(1−pvu)pvu=σ(yvTyu)\n \\begin{aligned}\n \\mathcal{L}(y\\_v, y\\_u, e\\_{vu}) &= -e\\_{vu} \\log(p\\_{vu}) - (1 - e\\_{vu}) \\log(1 - p\\_{vu}) \\\\\n p\\_{vu} &= \\sigma(y\\_v^Ty\\_u)\n \\end{aligned}\n L(yv​,yu​,evu​)pvu​​=−evu​log(pvu​)−(1−evu​)log(1−pvu​)=σ(yvT​yu​)​\n where σ\\sigmaσ is the [sigmoid function](https://en.wikipedia.org/wiki/Sigmoid_function),\n and evu=1e\\_{vu} = 1evu​=1 iff there is an edge between nodes vvv and uuu, being 000 otherwise.\n* **Node Clustering**: By simply clustering the learned node representations.\n\n\n\n The broad success of pre-training for natural language processing models\n such as ELMo  and BERT \n has sparked interest in similar techniques for GNNs\n .\n The key idea in each of these papers is to train GNNs to predict\n local (eg. node degrees, clustering coefficient, masked node attributes)\n and/or global graph properties (eg. pairwise distances, masked global attributes).\n \n\n\n\n Another self-supervised technique is to enforce that neighbouring nodes get similar embeddings,\n mimicking random-walk approaches such as node2vec  and DeepWalk :\n \n\n\nLG=∑v∑u∈NR(v)logexpzvTzu∑u′expzu′Tzu.\n L\\_{G} = \\sum\\_{v} \\sum\\_{u \\in N\\_R(v)} \\log\\frac{\\exp{z\\_v^T z\\_u}}{\\sum\\limits\\_{u’} \\exp{z\\_{u’}^T z\\_u}}.\n LG​=v∑​u∈NR​(v)∑​logu′∑​expzu′T​zu​expzvT​zu​​.\n\n where NR(v)N\\_R(v)NR​(v) is a multi-set of nodes visited when random walks are started from vvv.\n For large graphs, where computing the sum over all nodes may be computationally expensive,\n techniques such as Noise Contrastive Estimation  are especially useful.\n \n\n\n\n\n Conclusion and Further Reading\n--------------------------------\n\n\n\n While we have looked at many techniques and ideas in this article,\n the field of Graph Neural Networks is extremely vast.\n We have been forced to restrict our discussion to a small subset of the entire literature,\n while still communicating the key ideas and design principles behind GNNs.\n We recommend the interested reader take a look at\n  for a more comprehensive survey.\n \n\n\n\n We end with pointers and references for additional concepts readers might be interested in:\n \n\n\n### \n GNNs in Practice\n\n\n\n It turns out that accomodating the different structures of graphs is often hard to do efficiently,\n but we can still represent many GNN update equations using\n as sparse matrix-vector products (since generally, the adjacency matrix is sparse for most real-world graph datasets.)\n For example, the GCN variant discussed here can be represented as:\n h(k)=D−1A⋅h(k−1)W(k)T+h(k−1)B(k)T.\n h^{(k)} = D^{-1} A \\cdot h^{(k - 1)} {W^{(k)}}^T + h^{(k - 1)} {B^{(k)}}^T.\n h(k)=D−1A⋅h(k−1)W(k)T+h(k−1)B(k)T.\n Restructuring the update equations in this way allows for efficient vectorized implementations of GNNs on accelerators\n such as GPUs.\n \n\n\n\n Regularization techniques for standard neural networks,\n such as Dropout ,\n can be applied in a straightforward manner to the parameters\n (for example, zero out entire rows of W(k)W^{(k)}W(k) above).\n However, there are graph-specific techniques such as DropEdge \n that removes entire edges at random from the graph,\n that also boost the performance of many GNN models.\n \n\n\n### \n Different Kinds of Graphs\n\n\n\n Here, we have focused on undirected graphs, to avoid going into too many unnecessary details.\n However, there are some simple variants of spatial convolutions for:\n \n\n\n* Directed graphs: Aggregate across in-neighbourhood and/or out-neighbourhood features.\n* Temporal graphs: Aggregate across previous and/or future node features.\n* Heterogeneous graphs: Learn different aggregation functions for each node/edge type.\n\n\n\n There do exist more sophisticated techniques that can take advantage of the different structures of these graphs:\n see  for more discussion.\n \n\n\n### \n Pooling\n\n\n\n This article discusses how GNNs compute useful representations of nodes.\n But what if we wanted to compute representations of graphs for graph-level tasks (for example, predicting the toxicity of a molecule)?\n \n\n\n\n A simple solution is to just aggregate the final node embeddings and pass them through another neural network PREDICTG\\text{PREDICT}\\_GPREDICTG​:\n hG=PREDICTG(AGGv∈G({hv}))\n h\\_G = \\text{PREDICT}\\_G \\Big( \\text{AGG}\\_{v \\in G}\\left(\\{ h\\_v \\} \\right) \\Big)\n hG​=PREDICTG​(AGGv∈G​({hv​}))\n However, there do exist more powerful techniques for ‘pooling’ together node representations:\n \n\n\n* SortPool: Sort vertices of the graph to get a fixed-size node-order invariant representation of the graph, and then apply any standard neural network architecture.\n* DiffPool: Learn to cluster vertices, build a coarser graph over clusters instead of nodes, then apply a GNN over the coarser graph. Repeat until only one cluster is left.\n* SAGPool: Apply a GNN to learn node scores, then keep only the nodes with the top scores, throwing away the rest. Repeat until only one node is left.\n\n\n\n Supplementary Material\n------------------------\n\n\n### \n Reproducing Experiments\n\n\n\n The experiments from\n [Spectral Representations of Natural Images](#spectral-decompositions-of-natural-images)\n can be reproduced using the following\n Colab ![Google Colaboratory](images/colab.svg) notebook:\n [Spectral Representations of Natural Images](https://colab.research.google.com/github/google-research/google-research/blob/master/understanding_convolutions_on_graphs/SpectralRepresentations.ipynb).\n \n\n\n\n### \n Recreating Visualizations\n\n\n\n To aid in the creation of future interactive articles,\n we have created ObservableHQ\n ![ObservableHQ](images/observable.svg)\n notebooks for each of the interactive visualizations here:\n \n\n\n* [Neighbourhood Definitions for CNNs and GNNs](https://observablehq.com/@ameyasd/neighbourhoods-for-cnns-and-gnns)\n* [Graph Polynomial Convolutions on a Grid](https://observablehq.com/@ameyasd/cleaner-interactive-graph-polynomial-convolutions)\n* [Graph Polynomial Convolutions: Equations](https://observablehq.com/@ameyasd/updated-chebnet-equations)\n* [Modern Graph Neural Networks: Equations](https://observablehq.com/@ameyasd/interactive-gnn-equations)\n* [Modern Graph Neural Networks: Interactive Models](https://observablehq.com/@ameyasd/interactive-gnn-visualizations)\n which pulls together the following standalone notebooks:\n\t+ [Graph Convolutional Networks](https://observablehq.com/@ameyasd/graph-convolutional-networks)\n\t+ [Graph Attention Networks](https://observablehq.com/@ameyasd/graph-attention-networks)\n\t+ [GraphSAGE](https://observablehq.com/@ameyasd/graph-sample-and-aggregate-graphsage)\n\t+ [Graph Isomorphism Networks](https://observablehq.com/@ameyasd/graph-isomorphism-networks)\n* [Laplacian Eigenvectors for Grids](https://observablehq.com/@ameyasd/interactive-spectral-conversions)\n* [Spectral Decomposition of Natural Images](https://observablehq.com/@ameyasd/spectral-decompositions-of-natural-images)\n* [Spectral Convolutions: Equations](https://observablehq.com/@ameyasd/spectral-convolutions-equation)",
  "abstract": null,
  "url": "https://distill.pub/2021/understanding-gnns"
}